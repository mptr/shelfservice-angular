// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$blueprint-angular-primary: mat.define-palette(mat.$teal-palette);
$blueprint-angular-accent: mat.define-palette(mat.$blue-grey-palette);

// The warn palette is optional (defaults to red).
$blueprint-angular-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$blueprint-angular-theme: mat.define-light-theme(
	(
		color: (
			primary: $blueprint-angular-primary,
			accent: $blueprint-angular-accent,
			warn: $blueprint-angular-warn,
		),
	)
);
$primaryColor: mat.get-color-from-palette($blueprint-angular-primary, 500);
* {
	--primary-color: #{$primaryColor};
}

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($blueprint-angular-theme);

/* You can add global styles to this file, and also import other style files */
body {
	margin: 0;
}

html,
body {
	height: 100%;
}
body {
	margin: 0;
	font-family: Roboto, 'Helvetica Neue', sans-serif;
}
.newlined {
	white-space: pre-wrap;
}
.code {
	font-family: monospace;
}
/* SCROLLBAR */
::-webkit-scrollbar {
	width: 10px;
}
::-webkit-scrollbar-track {
	background: transparent;
}
::-webkit-scrollbar-thumb {
	background: #bbb;
	border: 2px solid #f1f1f1;
}
::-webkit-scrollbar-thumb:hover {
	background: #999;
}
// MATERIAL COSTOMIZATION
mat-card-actions button {
	margin: 0 0.5em 0 0 !important;
}
mat-card-actions[align='end'] button {
	margin: 0 0 0 0.5em !important;
}
.mat-card-header {
	gap: 16px;
}
.mat-card-header-text {
	margin: 0 !important;
}
.mat-tooltip {
	line-height: 1.4em !important;
}
*:not(.mat-step-icon-content) > .mat-icon {
	transform: translateY(-1.5px);
}

// mat-expansion fix for https://github.com/angular/components/issues/20002
mat-panel-description {
	justify-content: space-between;
}
.mat-content:only-child {
	margin-right: 8px;
}
.mat-expansion-panel-header-title,
.mat-expansion-panel-header-description {
	flex-basis: 0;
}
// Loading
body {
	@keyframes fadeOut {
		0% {
			opacity: 1;
		}
		99% {
			display: none;
		}
		100% {
			opacity: 0;
		}
	} /* .loading screen is visible when app is not bootstrapped yet, app-root is empty */
	app-root:not(:empty) + .loading {
		animation: fadeOut 0.7s ease forwards;
	}
	.loading {
		pointer-events: none;
		z-index: 100;
		position: fixed;
		height: 100%;
		width: 100%;
		top: 0;
		left: 0;
		background: darken($primaryColor, 20);
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		gap: 2em;
		.spinner {
			animation: rotate 2s linear infinite;
			z-index: 2;
			top: 50%;
			left: 50%;
			width: 5em;
			height: 5em;

			& .path {
				stroke: #fff9;
				stroke-linecap: round;
				animation: dash 1.5s ease-in-out infinite;
			}
		}
		h1 {
			color: #fff9;
		}
		@keyframes rotate {
			100% {
				transform: rotate(360deg);
			}
		}
		@keyframes dash {
			0% {
				stroke-dasharray: 1, 150;
				stroke-dashoffset: 0;
			}
			50% {
				stroke-dasharray: 90, 150;
				stroke-dashoffset: -35;
			}
			100% {
				stroke-dasharray: 90, 150;
				stroke-dashoffset: -124;
			}
		}
	}
}
